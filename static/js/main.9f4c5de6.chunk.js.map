{"version":3,"sources":["config/index.js","components/Loading/index.js","components/Loading/loading.module.css","App.js","serviceWorker.js","index.js","App.module.css"],"names":["baseUrl","api","origin","token","Loading","className","styles","loading","module","exports","Home","lazy","Explore","AppHeader","header","routes","map","route","path","name","exact","key","to","activeClassName","active","component","AppContentWithRoute","withRouter","props","currentRoute","find","location","pathname","content","page","fallback","AppFooter","footer","href","target","rel","App","basename","CONFIG","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2GAAe,KACbA,QAAS,QACTC,IAAK,CACHC,OAAQ,0BACRC,MAAO,sC,gCCJX,uEAGe,SAASC,IACtB,OACE,yBAAKC,UAAWC,IAAOC,SAAvB,wB,mBCJJC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,uNCKvDC,EAAOC,gBAAK,kBAAM,sDAClBC,EAAUD,gBAAK,kBAAM,sDAErBE,EAAY,kBAChB,yBAAKR,UAAWC,IAAOQ,QACrB,yBAAKT,UAAWC,IAAM,eAAtB,cACA,yBAAKD,UAAWC,IAAM,cAElBS,EAAOC,KAAI,SAAAC,GAAU,IACXC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACpB,OACE,kBAAC,IAAD,CACEC,IAAKF,EACLG,GAAIJ,EACJE,MAAOA,EACPf,UAAWC,IAAM,YACjBiB,gBAAiBjB,IAAOkB,QAEvBL,SASTJ,EAAS,CAAC,CACdG,KAAM,IACNC,KAAM,eACNM,UAAWf,EACXU,OAAO,GACN,CACDF,KAAM,WACNC,KAAM,eACNM,UAAWb,EACXQ,OAAO,IA8BHM,EAAsBC,aA1BT,SAAAC,GACjB,IAAMC,EAAed,EAAOe,MAAK,SAAAb,GAAK,OAAIA,EAAMC,OAASU,EAAMG,SAASC,YACxE,OACE,yBAAK3B,UAAWC,IAAO2B,SACrB,yBAAK5B,UAAWC,IAAO4B,MACrB,kBAAC,WAAD,CAAUC,SAAW,kBAAC/B,EAAA,EAAD,OACnB,4BAAKyB,EAAaV,MAClB,kBAAC,IAAD,KAEIJ,EAAOC,KAAI,SAAAC,GAAU,IACXG,EAA2BH,EAA3BG,MAAOF,EAAoBD,EAApBC,KAAMO,EAAcR,EAAdQ,UACrB,OACE,kBAAC,IAAD,CACEJ,IAAKH,EACLE,MAAOA,EACPF,KAAMA,EACNO,UAAWA,cAYzBW,EAAY,kBAChB,yBAAK/B,UAAWC,IAAO+B,QACrB,yBAAKhC,UAAWC,IAAM,cACpB,8CACA,uBAAGgC,KAAK,uBAAuBC,OAAO,SAASC,IAAI,uBAAnD,eAeSC,EAVH,kBACV,6BACE,kBAAC,IAAD,CAAQC,SAAUC,IAAO3C,SACvB,kBAAC,EAAD,MACA,kBAAC0B,EAAD,MACA,kBAAC,EAAD,SC5EckB,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BrD,EAAOC,QAAU,CAAC,OAAS,oBAAoB,cAAgB,2BAA2B,aAAe,0BAA0B,YAAc,yBAAyB,OAAS,oBAAoB,QAAU,qBAAqB,KAAO,kBAAkB,OAAS,oBAAoB,aAAe,6B","file":"static/js/main.9f4c5de6.chunk.js","sourcesContent":["export default {\n  baseUrl: '/news',\n  api: {\n    origin: 'https://newsapi.org/v2/',\n    token: 'a1e0f3427bfd466988c4a19c0c7095f5'\n  }\n}\n","import React from 'react';\nimport styles from './loading.module.css'\n\nexport default function Loading () {\n  return (\n    <div className={styles.loading}>加載中</div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"loading_loading__3nYZo\",\"blink\":\"loading_blink__1YMCk\"};","import { BrowserRouter as Router, Route, Switch, NavLink, withRouter } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react'\nimport CONFIG from './config'\nimport styles from './App.module.css'\nimport Loading from './components/Loading'\n\nconst Home = lazy(() => import('./routes/Home'));\nconst Explore = lazy(() => import('./routes/Explore'))\n\nconst AppHeader = () => (\n  <div className={styles.header}>\n    <div className={styles['header__trend']}>Local News</div>\n    <div className={styles['header__tabs']}>\n      {\n        routes.map(route => {\n          const { path, name, exact } = route\n          return (\n            <NavLink\n              key={name}\n              to={path}\n              exact={exact}\n              className={styles['header__tab']}\n              activeClassName={styles.active}\n            >\n              {name}\n            </NavLink>\n          )\n        })\n      }\n    </div>\n  </div>\n)\n\nconst routes = [{\n  path: '/',\n  name: '焦點',\n  component: Home,\n  exact: true\n}, {\n  path: '/explore',\n  name: '探索',\n  component: Explore,\n  exact: true\n}]\n\n\nconst AppContent = props => {\n  const currentRoute = routes.find(route => route.path === props.location.pathname)\n  return (\n    <div className={styles.content}>\n      <div className={styles.page}>\n        <Suspense fallback={ <Loading/> }>\n          <h2>{currentRoute.name}</h2>\n          <Switch>\n            {\n              routes.map(route => {\n                const { exact, path, component } = route\n                return (\n                  <Route\n                    key={path}\n                    exact={exact}\n                    path={path}\n                    component={component}\n                  />)\n              })\n            }\n          </Switch>\n        </Suspense>\n      </div>\n    </div>\n  )\n}\nconst AppContentWithRoute = withRouter(AppContent)\n\nconst AppFooter = () => (\n  <div className={styles.footer}>\n    <div className={styles['footer__info']}>\n      <span>Thanks for: </span>\n      <a href=\"https://newsapi.org/\" target=\"_blank\" rel=\"noopener noreferrer\">NEWS API</a>\n    </div>\n  </div>\n)\n\nconst App = () => (\n  <div>\n    <Router basename={CONFIG.baseUrl}>\n      <AppHeader/>\n      <AppContentWithRoute/>\n      <AppFooter/>\n    </Router>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './vars.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"header__trend\":\"App_header__trend__ou2dU\",\"header__tabs\":\"App_header__tabs__2nP6O\",\"header__tab\":\"App_header__tab__2Ghcc\",\"active\":\"App_active__eYtTS\",\"content\":\"App_content__3La4L\",\"page\":\"App_page__CKP-2\",\"footer\":\"App_footer__29Fsv\",\"footer__info\":\"App_footer__info__33Pm8\"};"],"sourceRoot":""}