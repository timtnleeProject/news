{"version":3,"sources":["components/Setting/setting.module.css","components/Setting/home.js","routes/Home/SettingBar.js","routes/Home/index.js","helper/store.js","components/NewsList/index.js","components/NewsList/news.module.css","helper/api.js","helper/data.js"],"names":["module","exports","countries","split","categories","Setting","setting","store","get","useState","country","setCountry","category","setCategory","handleTagSelect","type","value","remove","save","key","className","styles","section","title","map","c","active","Chip","tag","onClick","bind","label","color","props","List","style","maxWidth","cursor","marginBottom","subheader","dense","ListItem","ListItemText","primary","Divider","Home","_isMounted","state","list","modalOpen","this","getTopHeadlines","then","news","setState","stateAfter","localSetting","toggleModal","length","Loading","NewsList","Modal","open","onClose","Fade","in","top","left","transform","position","width","backgroundColor","padding","float","Button","variant","React","Component","globalStore","initialStore","expired","Error","str","JSON","stringify","localStorage","setItem","getItem","date","parsed","parse","Date","now","getTime","removeItem","clear","params","q","News","info","source","name","author","push","publishedAt","toLocaleString","item","window","url","image","backgroundImage","content","join","description","i","urlToImage","CONFIG","api","origin","token","instance","axios","create","baseURL","timeout","headers","interceptors","response","use","data","status","Promise","reject","localHeadlines","resolve","res","milisec","headlines","articles","anHour","getEverything","ob1","ob2","localParams","Object","keys","some","localEverything","fetchEverything"],"mappings":"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","file":"static/js/5.12bbe46e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"setting_section__1vm0s\",\"title\":\"setting_title__1f4y-\",\"tags-wrap\":\"setting_tags-wrap__1Px1Y\",\"tag\":\"setting_tag__2ERrU\"};","import React, { useState } from 'react'\r\nimport styles from './setting.module.css'\r\nimport store from 'helper/store'\r\nimport Chip from '@material-ui/core/Chip'\r\n\r\nconst countryStr = 'ae ar at au be bg br ca ch cn co cu cz de eg fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za'\r\nconst countries = countryStr.split(' ')\r\nconst categories = ['business', 'entertainment', 'general', 'health', 'science', 'sports', 'technology']\r\n\r\nexport default function Setting () {\r\n  const setting = store.get('setting')\r\n  const [country, setCountry] = useState(setting.country);\r\n  const [category, setCategory] = useState(setting.category);\r\n  const handleTagSelect = (type, value) => {\r\n    const setting = store.get('setting')\r\n    if (setting[type] === value) return\r\n    store.remove('headlines')\r\n    store.save({\r\n      key: 'setting',\r\n      value: {\r\n        ...setting,\r\n        [type]: value\r\n      }\r\n    })\r\n    if (type === 'country') setCountry(value)\r\n    else setCategory(value)\r\n  }\r\n  return (\r\n    <div>\r\n      <div className={styles.section}>\r\n        <div className={styles.title}>country</div>\r\n        <div className={styles['tags-wrap']}>\r\n          {\r\n            countries.map(c => {\r\n              const active = country === c\r\n              return (\r\n                <Chip\r\n                  className={styles.tag}\r\n                  onClick={handleTagSelect.bind(this, 'country', c)}\r\n                  label={c}\r\n                  key={c}\r\n                  color={active ? 'primary' : 'default'}\r\n                />\r\n              )}\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className={styles.section}>\r\n        <div className={styles.title}>category</div>\r\n        <div className={styles['tags-wrap']}>\r\n          {\r\n            categories.map(c => {\r\n              const active = category === c\r\n              return (\r\n                <Chip\r\n                  className={styles.tag}\r\n                  onClick={handleTagSelect.bind(this, 'category', c)}\r\n                  label={c}\r\n                  key={c}\r\n                  color={active ? 'primary' : 'default'}\r\n                />\r\n              )}\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Divider from '@material-ui/core/Divider'\r\n\r\nexport default function Setting (props) {\r\n  const { country, category } = props.setting\r\n  return (\r\n    <List\r\n      className=\"no-tab\"\r\n      style={{\r\n        maxWidth: '300px',\r\n        cursor: 'pointer',\r\n        marginBottom: '10px'\r\n      }}\r\n      subheader=\"Preference\"\r\n      dense\r\n      onClick={props.onClick}\r\n    >\r\n      <ListItem>\r\n        <ListItemText primary=\"Country\" />\r\n        <ListItemText primary={country} />\r\n      </ListItem>\r\n      <Divider />\r\n      <ListItem>\r\n        <ListItemText primary=\"Category\" />\r\n        <ListItemText primary={category} />\r\n      </ListItem>\r\n      <Divider />\r\n    </List>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport NewsList from '../../components/NewsList'\r\nimport Loading from '../../components/Loading'\r\nimport Setting from '../../components/Setting/home'\r\nimport SettingBar from './SettingBar'\r\nimport { getTopHeadlines } from '../../helper/data'\r\nimport store from '../../helper/store'\r\nimport Modal from '@material-ui/core/Modal'\r\nimport Button from '@material-ui/core/Button'\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nexport default class Home extends React.Component {\r\n  _isMounted = false\r\n  constructor (props) {\r\n    super(props)\r\n    const setting = store.get('setting')\r\n    this.state = {\r\n      list: [],\r\n      modalOpen: false,\r\n      setting\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this._isMounted = true\r\n    this.getTopHeadlines()\r\n  }\r\n  componentWillUnmount () {\r\n    this._isMounted = false\r\n  }\r\n\r\n  getTopHeadlines () {\r\n    getTopHeadlines()\r\n      .then(news => {\r\n        if (this._isMounted) {\r\n          this.setState({\r\n            list: news\r\n          })\r\n        }\r\n      })\r\n  }\r\n\r\n  toggleModal () {\r\n    this.setState({\r\n      modalOpen: !this.state.modalOpen\r\n    })\r\n  }\r\n  save () {\r\n    const stateAfter = {}\r\n    const { category, country } = this.state.setting\r\n    const localSetting = store.get('setting')\r\n    if (category !== localSetting.category || country !== localSetting.country) {\r\n      stateAfter.setting = localSetting\r\n      stateAfter.list = []\r\n      this.getTopHeadlines()\r\n    }\r\n    this.toggleModal()\r\n    this.setState(stateAfter)\r\n  }\r\n  render () {\r\n    const { category, country } = this.state.setting\r\n    return (\r\n      <div>\r\n        <SettingBar\r\n          onClick={this.toggleModal.bind(this)}\r\n          setting={{ category, country }}\r\n        />\r\n        {\r\n          this.state.list.length === 0\r\n            ? <Loading/>\r\n            : <NewsList list={this.state.list}/>\r\n        }\r\n        <Modal\r\n          open={this.state.modalOpen}\r\n          onClose={this.toggleModal.bind(this)}\r\n        >\r\n          <Fade in={this.state.modalOpen}>\r\n            <div style={{\r\n              top: '50%',\r\n              left: '50%',\r\n              transform: 'translate(-50%, -50%)',\r\n              position: 'absolute',\r\n              width: '80vw',\r\n              maxWidth: '600px',\r\n              backgroundColor: 'white',\r\n              padding: '10px'\r\n            }}>\r\n              <Setting></Setting>\r\n              <div style={{float: 'right'}}>\r\n                <Button variant=\"contained\" className=\"m-r\" onClick={this.toggleModal.bind(this)}>Cancel</Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.save.bind(this)}>Save</Button>\r\n              </div>\r\n            </div>\r\n          </Fade>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}","const isExpired = (date) => {\r\n  if (!date) return false\r\n  return Date.now() > new Date(date).getTime()\r\n}\r\n\r\nexport class Store {\r\n  constructor (initialStore) {\r\n    this.initialStore = initialStore\r\n  }\r\n  save ({ key, value, expired }) {\r\n    if (!value || typeof value !== 'object') throw new Error('value must be an object')\r\n    const str = JSON.stringify({\r\n      value,\r\n      expired\r\n    })\r\n    localStorage.setItem(key, str)\r\n  }\r\n  get (key) {\r\n    const str = localStorage.getItem(key)\r\n    if (!str) return this.initialStore[key] || null\r\n    const parsed = JSON.parse(str)\r\n    if (isExpired(parsed.expired)) {\r\n      return this.initialStore[key] || null\r\n    } else {\r\n      return parsed.value\r\n    }\r\n  }\r\n  remove (key) {\r\n    localStorage.removeItem(key)\r\n  }\r\n  clear () {\r\n    localStorage.clear()\r\n  }\r\n}\r\n\r\nconst globalStore = new Store({\r\n  setting: {\r\n    country: 'tw',\r\n    category: 'general'\r\n  },\r\n  params: {\r\n    q: 'Google'\r\n  }\r\n})\r\n// developing\r\n// store.clear()\r\nexport default globalStore\r\n","import React from 'react';\r\nimport styles from './news.module.css'\r\n\r\nfunction News (props) {\r\n  const openLink = () => {\r\n    window.open(props.url, '_blank')\r\n  }\r\n  const info = [props.source.name]\r\n  if (props.author) info.push(props.author)\r\n  const date = props.publishedAt\r\n    ? new Date(props.publishedAt).toLocaleString()\r\n    : null\r\n  return (\r\n    <div\r\n      className={styles.item}\r\n      onClick={openLink}\r\n    >\r\n      { props.image\r\n        ? (\r\n          <div\r\n            className={styles.image}\r\n            style={{backgroundImage: `url(${props.image})`}}\r\n          ></div>\r\n        )\r\n        : null\r\n      }\r\n      <div className={styles.content}>\r\n        <div className={styles.title}>{props.title}</div>\r\n        <div className={styles.info}>\r\n          <span>{info.join('/')}</span>\r\n          <span>{date}</span>\r\n        </div>\r\n        <div className={styles.description}>{props.description}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function NewsList (props) {\r\n  const news = props.list.map((item, i) => (\r\n    <News\r\n      title={item.title}\r\n      description={item.description}\r\n      url={item.url}\r\n      source={item.source}\r\n      author={item.author}\r\n      publishedAt={item.publishedAt}\r\n      image={item.urlToImage}\r\n      key={i}\r\n    />\r\n  ))\r\n  return (\r\n    <div>\r\n      {news}\r\n    </div>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"news_item__3G2hi\",\"content\":\"news_content__1S5_k\",\"title\":\"news_title__1juJ3\",\"info\":\"news_info__9tG79\",\"description\":\"news_description__32Is-\",\"image\":\"news_image__38mXW\"};","import axios from 'axios'\r\nimport CONFIG from '../config'\r\nconst { origin, token } = CONFIG.api\r\n\r\nconst instance = axios.create({\r\n  baseURL: origin,\r\n  timeout: 3000,\r\n  headers: {\r\n    'X-Api-Key': token\r\n  }\r\n})\r\ninstance.interceptors.response.use(response => {\r\n  if (response.data && response.data.status === 'ok') return response.data\r\n  else return Promise.reject(response)\r\n})\r\n\r\nexport function fetchHeadlines (params) {\r\n  return instance.get('/top-headlines', {\r\n    params\r\n  })\r\n}\r\n\r\nexport function fetchSources ({ country }) {\r\n  return instance.get('/sources')\r\n}\r\n\r\nexport function fetchEverything ({ q }) {\r\n  return instance.get('/everything', {\r\n    params: {\r\n      q\r\n    }\r\n  })\r\n}","import store from './store';\r\nimport { fetchHeadlines, fetchEverything } from './api'\r\n\r\nconst anHour = 60 * 60 * 1000\r\nconst dateAfter = (milisec) => {\r\n  return new Date(Date.now() + milisec)\r\n}\r\n\r\nexport function resetTopHeadlines () {\r\n  store.remove('headlines')\r\n}\r\n\r\nexport function getTopHeadlines () {\r\n  const setting = store.get('setting')\r\n  const { country, category } = setting\r\n  const localHeadlines = store.get('headlines')\r\n  if (localHeadlines) return Promise.resolve(localHeadlines)\r\n  return fetchHeadlines({ country, category }).then(res => {\r\n    const headlines = res.articles\r\n    store.save({\r\n      key: 'headlines',\r\n      value: headlines,\r\n      expired: dateAfter(anHour / 2)\r\n    })\r\n    return headlines\r\n  })\r\n}\r\n\r\nconst isSame = (ob1, ob2) => {\r\n  const keys = Object.keys({...ob1, ob2})\r\n  const inconsist = keys.some(key => {\r\n    return ob1[key] !== ob2[key]\r\n  })\r\n  return !inconsist\r\n}\r\nexport function getEverything (params) {\r\n  const localParams = store.get('params')\r\n  if (isSame(localParams, params)) {\r\n    const localEverything = store.get('everything')\r\n    if (localEverything) return Promise.resolve(localEverything)\r\n  }\r\n  return fetchEverything(params).then(res => {\r\n    const articles = res.articles\r\n    store.save({\r\n      key: 'everything',\r\n      value: articles\r\n    })\r\n    store.save({\r\n      key: 'params',\r\n      value: params\r\n    })\r\n    return articles\r\n  })\r\n}"],"sourceRoot":""}