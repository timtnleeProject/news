{"version":3,"sources":["App.module.css","config/index.js","components/Loading/index.js","components/Loading/loading.module.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseUrl","api","origin","token","Loading","className","styles","loading","Home","lazy","Explore","AppHeader","AppBar","Toolbar","Typography","routes","map","route","path","name","exact","key","to","activeClassName","active","component","AppContentWithRoute","withRouter","props","currentRoute","find","location","pathname","content","page","fallback","AppFooter","footer","href","target","rel","App","basename","CONFIG","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,cAAgB,2BAA2B,aAAe,0BAA0B,YAAc,yBAAyB,OAAS,oBAAoB,QAAU,qBAAqB,KAAO,kBAAkB,OAAS,oBAAoB,aAAe,4B,gCCD/P,KACbC,QAAS,QACTC,IAAK,CACHC,OAAQ,0BACRC,MAAO,sC,gCCJX,+EAIe,SAASC,IACtB,OACE,yBAAKC,UAAWC,IAAOC,SACrB,kBAAC,IAAD,S,mBCNNT,EAAOC,QAAU,CAAC,QAAU,2B,iPCMtBS,EAAOC,gBAAK,kBAAM,8DAClBC,EAAUD,gBAAK,kBAAM,uDAErBE,EAAY,kBAChB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYT,UAAWC,IAAM,eAA7B,cACA,kBAACQ,EAAA,EAAD,CAAYT,UAAWC,IAAM,cAEzBS,EAAOC,KAAI,SAAAC,GAAU,IACXC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACpB,OACE,kBAAC,IAAD,CACEC,IAAKF,EACLG,GAAIJ,EACJE,MAAOA,EACPf,UAAWC,IAAM,YACjBiB,gBAAiBjB,IAAOkB,QAEvBL,UAUXJ,EAAS,CAAC,CACdG,KAAM,IACNC,KAAM,YACNM,UAAWjB,EACXY,OAAO,GACN,CACDF,KAAM,WACNC,KAAM,UACNM,UAAWf,EACXU,OAAO,IA8BHM,EAAsBC,aA1BT,SAAAC,GACjB,IAAMC,EAAed,EAAOe,MAAK,SAAAb,GAAK,OAAIA,EAAMC,OAASU,EAAMG,SAASC,YACxE,OACE,yBAAK3B,UAAWC,IAAO2B,SACrB,yBAAK5B,UAAWC,IAAO4B,MACrB,kBAAC,WAAD,CAAUC,SAAW,kBAAC/B,EAAA,EAAD,OACnB,4BAAKyB,EAAaV,MAClB,kBAAC,IAAD,KAEIJ,EAAOC,KAAI,SAAAC,GAAU,IACXG,EAA2BH,EAA3BG,MAAOF,EAAoBD,EAApBC,KAAMO,EAAcR,EAAdQ,UACrB,OACE,kBAAC,IAAD,CACEJ,IAAKH,EACLE,MAAOA,EACPF,KAAMA,EACNO,UAAWA,cAYzBW,EAAY,kBAChB,yBAAK/B,UAAWC,IAAO+B,QACrB,yBAAKhC,UAAWC,IAAM,cACpB,8CACA,uBAAGgC,KAAK,uBAAuBC,OAAO,SAASC,IAAI,uBAAnD,eAeSC,EAVH,kBACV,6BACE,kBAAC,IAAD,CAAQC,SAAUC,IAAO3C,SACvB,kBAAC,EAAD,MACA,kBAAC0B,EAAD,MACA,kBAAC,EAAD,SC/EckB,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2f866a56.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header__trend\":\"App_header__trend__2lxkH\",\"header__tabs\":\"App_header__tabs__3TD3L\",\"header__tab\":\"App_header__tab__1qSOE\",\"active\":\"App_active__1Lfk_\",\"content\":\"App_content__2owIx\",\"page\":\"App_page__1qomZ\",\"footer\":\"App_footer__11KSG\",\"footer__info\":\"App_footer__info__26EHB\"};","export default {\r\n  baseUrl: '/news',\r\n  api: {\r\n    origin: 'https://newsapi.org/v2/',\r\n    token: 'a1e0f3427bfd466988c4a19c0c7095f5'\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styles from './loading.module.css'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nexport default function Loading () {\r\n  return (\r\n    <div className={styles.loading}>\r\n      <CircularProgress></CircularProgress>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"loading_loading__1FhcM\"};","import { BrowserRouter as Router, Route, Switch, NavLink, withRouter } from 'react-router-dom';\r\nimport React, { Suspense, lazy } from 'react'\r\nimport CONFIG from './config'\r\nimport styles from './App.module.css'\r\nimport Loading from './components/Loading'\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\r\n\r\nconst Home = lazy(() => import('./routes/Home'));\r\nconst Explore = lazy(() => import('./routes/Explore'))\r\n\r\nconst AppHeader = () => (\r\n  <AppBar>\r\n    <Toolbar>\r\n      <Typography className={styles['header__trend']}>Local News</Typography>\r\n      <Typography className={styles['header__tabs']}>\r\n        {\r\n          routes.map(route => {\r\n            const { path, name, exact } = route\r\n            return (\r\n              <NavLink\r\n                key={name}\r\n                to={path}\r\n                exact={exact}\r\n                className={styles['header__tab']}\r\n                activeClassName={styles.active}\r\n              >\r\n                {name}\r\n              </NavLink>\r\n            )\r\n          })\r\n        }\r\n      </Typography>\r\n    </Toolbar>\r\n  </AppBar>\r\n)\r\n\r\nconst routes = [{\r\n  path: '/',\r\n  name: 'Headlines',\r\n  component: Home,\r\n  exact: true\r\n}, {\r\n  path: '/explore',\r\n  name: 'Explore',\r\n  component: Explore,\r\n  exact: true\r\n}]\r\n\r\n\r\nconst AppContent = props => {\r\n  const currentRoute = routes.find(route => route.path === props.location.pathname)\r\n  return (\r\n    <div className={styles.content}>\r\n      <div className={styles.page}>\r\n        <Suspense fallback={ <Loading/> }>\r\n          <h2>{currentRoute.name}</h2>\r\n          <Switch>\r\n            {\r\n              routes.map(route => {\r\n                const { exact, path, component } = route\r\n                return (\r\n                  <Route\r\n                    key={path}\r\n                    exact={exact}\r\n                    path={path}\r\n                    component={component}\r\n                  />)\r\n              })\r\n            }\r\n          </Switch>\r\n        </Suspense>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nconst AppContentWithRoute = withRouter(AppContent)\r\n\r\nconst AppFooter = () => (\r\n  <div className={styles.footer}>\r\n    <div className={styles['footer__info']}>\r\n      <span>Thanks for: </span>\r\n      <a href=\"https://newsapi.org/\" target=\"_blank\" rel=\"noopener noreferrer\">NEWS API</a>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nconst App = () => (\r\n  <div>\r\n    <Router basename={CONFIG.baseUrl}>\r\n      <AppHeader/>\r\n      <AppContentWithRoute/>\r\n      <AppFooter/>\r\n    </Router>\r\n  </div>\r\n)\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './vars.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}